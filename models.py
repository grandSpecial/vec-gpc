from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text, ForeignKey
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from pgvector.sqlalchemy import Vector
from pydantic import BaseModel
from typing import List, Optional
import os  
from dotenv import load_dotenv
load_dotenv()

# SQLAlchemy Setup
Base = declarative_base()

# SQLAlchemy Model for GPC Level
class GPCLevel(Base):
    __tablename__ = "gpc_level"
    
    id = Column(Integer, primary_key=True, index=True)
    level = Column(Integer, index=True)
    code = Column(Integer, index=True)
    title = Column(String)
    full_title = Column(String)
    definition = Column(Text)
    definition_excludes = Column(Text)
    active = Column(Boolean)
    parent_id = Column(Integer, ForeignKey('gpc_level.id'))
    level_3_category = Column(String, index=True)  # Updated field name for Level 3 categories
    
    # Relationship for self-referencing hierarchy
    parent = relationship('GPCLevel', remote_side=[id], backref='children')

class Items(Base):
    __tablename__ = "items"
    
    id = Column(Integer, primary_key=True)
    vector = Column(Vector(1536))

# Database connection details
DATABASE_URL = os.getenv('DATABASE_URL')
# SQLalchemy only accepts urls like "postgresql://"
# but heroku will not provide so we have to make it ourselves
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Pydantic Models (Generated by datamodel-codegen)

class Child4(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List

class Child3(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List[Child4]

class Child2(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List[Child3]

class Child1(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List[Child2]

class Child(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List[Child1]

class SchemaItem(BaseModel):
    Level: int
    Code: int
    Title: str
    Definition: str
    DefinitionExcludes: Optional[str]
    Active: bool
    Childs: List[Child]

class Model(BaseModel):
    LanguageCode: str
    DateUtc: str
    Schema: List[SchemaItem]
